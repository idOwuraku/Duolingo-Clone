# This is a pipeline to test semantic-release and the docker build.
# It triggers on push to main, calculates the next version,
# pushes the new package.json, and builds the image locally.
name: üöÄ TEST Semantic Release & Build

on:
  push:
    branches:
      - main

permissions:
  contents: write         # Needed to push version bumps
  packages: write         # (Kept for consistency, can be removed)

jobs:
  semantic-release-build:
    runs-on: ubuntu-latest
    
    env:
      IMAGE_NAME: duolingo-clone
      # Define a static region for Docker tag consistency
      REGION: us-central1 

    steps:
      # --- 1Ô∏è‚É£ Checkout repo ---
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release commit analysis

      # --- 2Ô∏è‚É£ Setup Node.js ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: npm ci

      # --- 3Ô∏è‚É£ Run lint & tests (optional but recommended) ---
      - name: Run lint and tests
        run: |
          npm run lint --if-present
          npm test --if-present

      # --- 4Ô∏è‚É£ Read current version ---
      - name: Read current version
        id: pkg
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      # --- 5Ô∏è‚É£ Determine next version using semantic-release ---
      - name: Determine new semantic version
        id: semver
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true # Only calculate next version
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- 6Ô∏è‚É£ Compare versions and decide ---
      - name: Set version for build
        id: version
        run: |
          current=${{ steps.pkg.outputs.version }}
          next=${{ steps.semver.outputs.new_release_version }}

          if [ -z "$next" ] || [ "$next" == "$current" ]; then
            echo "No semantic changes detected ‚Äî skipping release."
            echo "version=$current" >> $GITHUB_OUTPUT
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "New version: $next"
            echo "version=$next" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      # --- 7Ô∏è‚É£ Update package.json & push (if new version) ---
      - name: Update package.json with new version
        # FIX: This step now only runs if a new version was found
        if: steps.version.outputs.should_release == 'true'
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.version }} [skip ci]"
          git push

      # --- 8Ô∏è‚É£ Set up Docker Buildx (if new version) ---
      - name: Set up Docker Buildx
        # FIX: This step now only runs if a new version was found
        if: steps.version.outputs.should_release == 'true'
        uses: docker/setup-buildx-action@v3
        
      # --- 9Ô∏è‚É£ Build image locally (if new version) ---
      - name: Build image locally
        # FIX: This step now only runs if a new version was found
        if: steps.version.outputs.should_release == 'true'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false # Do not push
          load: true  # Load into local Docker daemon
          tags: ${{ env.REGION }}-docker.pkg.dev/local-project/local-repo/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          build-args: |
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            APP_VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # --- 1Ô∏è‚É£0Ô∏è‚É£ Log skip (if no new version) ---
      - name: Log skip
        # This step now only runs if NO new version was found
        if: steps.version.outputs.should_release == 'false'
        run: |
          echo "No new version detected. Exiting workflow."

